pipeline {
    agent any
    options {
        // 设置保留的最大历史构建数为10
        buildDiscarder(logRotator(numToKeepStr: '10'))
    }
    environment {
        // 此处的PROJECT_NAME应与maven打包后的jar包名保持一致,如打包后jar包为pehr-api.jar,则PROJECT_NAME='pehr-api'
        PROJECT_NAME = 'pipeline-demo1'
        DOCKER_REGISTRY_URL = "10.10.200.135:5000"
        HEALTH_CHECK_URL = "/aaa"
    }
    stages {
        stage('Clean and build') {
            tools {
                maven 'apache-maven-3.6.0'
            }
            steps {
                echo "current branch is ${env.BRANCH_NAME}"

                dir('demo1') {
                    echo 'Clean demo1'
                    sh 'mvn clean'
                    echo 'Build demo1'
//                    sh 'mvn package'
                }

                script {
                    //currentBuild.result = "UNSTABLE"
                    //currentBuild.result = "FAILED"
                    if (env.BRANCH_NAME != 'master') {
                        echo 'Staring to build docker image'
                        dir('demo1') {
                            def appImage = docker.build("${DOCKER_REGISTRY_URL}/${env.PROJECT_NAME}:${env.BUILD_ID}")
                            appImage.push()
                        }
                        echo 'delete current docker image'
                        echo "docker rmi ${DOCKER_REGISTRY_URL}/${env.PROJECT_NAME}:${env.BUILD_ID}"
                        sh "docker rmi ${DOCKER_REGISTRY_URL}/${env.PROJECT_NAME}:${env.BUILD_ID}"
                    } else if (env.BRANCH_NAME == 'master') {
                        dir('demo1/target') {
//                            sh "mv ${env.PROJECT_NAME}.jar ${env.PROJECT_NAME}-${env.BUILD_ID}.jar"
                        }
                    }
                }
            }
        }

        stage('Deploy') {
            steps {
                script {
                    if (env.BRANCH_NAME == 'develop') {
                        def remote = [:]
                        remote.name = 'node-135'
                        remote.host = '10.10.200.135'
                        remote.allowAnyHosts = true

                        withCredentials([usernamePassword(credentialsId: '29126132-7287-498c-a9c2-f77b9e384ac3', passwordVariable: 'password', usernameVariable: 'username')]) {
                            remote.user = username
                            remote.password = password

                            sshCommand remote: remote, command: "/usr/local/docker/build.sh --replication 2 --tag $BUILD_NUMBER --inner-port=6000 --outer-port=6000 --entrypoint=\"-Xmn512m -Xms1024m -Xmx2048m -Duser.timezone=GMT+08\" ${DOCKER_REGISTRY_URL}/${PROJECT_NAME}"
                        }
                    } else if (env.BRANCH_NAME == 'test') {
                        echo "branch name is ${env.BRANCH_NAME}"
                        echo 'no need to deploy'
                    } else if (env.BRANCH_NAME == 'master') {
//                        dir('demo1/target') {
//                            sshPublisher(publishers: [sshPublisherDesc(configName: '10.10.200.135-GONGWEI', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: "cd /root/gongwei/demo_1\n" +
//                                    "/root/gongwei/deploy-script/build.sh --project-name=${PROJECT_NAME} --build-number=${BUILD_NUMBER} --healthcheck-url=${HEALTH_CHECK_URL} --check-time-interval=5 --max-check-count=1 6000 6001", execTimeout: 600000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: 'demo_1', remoteDirectorySDF: false, removePrefix: '', sourceFiles: '*.jar')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])
//                            sshPublisher(publishers: [sshPublisherDesc(configName: '10.10.200.135-GONGWEI', transfers: [sshTransfer(cleanRemote: false, excludes: '', execCommand: "cd /root/gongwei/demo_2\n" +
//                                    "/root/gongwei/deploy-script/build.sh --project-name=${PROJECT_NAME} --build-number=${BUILD_NUMBER} --healthcheck-url=${HEALTH_CHECK_URL} --check-time-interval=5 --max-check-count=1 6002 6003", execTimeout: 600000, flatten: false, makeEmptyDirs: false, noDefaultExcludes: false, patternSeparator: '[, ]+', remoteDirectory: 'demo_2', remoteDirectorySDF: false, removePrefix: '', sourceFiles: '*.jar')], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)])
//                        }
                        def resultcode1 = sh(script: "echo `curl -s -o /dev/null -w \\\"%{http_code}\\\" http://10.10.200.135:6000${env.HEALTH_CHECK_URL}`", returnStdout: true)
                        def resultcode2 = sh(script: "echo `curl -s -o /dev/null -w \\\"%{http_code}\\\" http://10.10.200.135:6001${env.HEALTH_CHECK_URL}`", returnStdout: true)
                        echo "${resultcode1}"
                        echo "${resultcode2}"

                        if(resultcode1 != '200' && resultcode2 != '200'){
                            currentBuild.result = "FAILED"
                        }

                        sh 'docker -v'
                    }
                }
            }
        }
    }
}